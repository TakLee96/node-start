#!/usr/bin/env node

var root_dir = process.env.PWD;
var fs = require("fs");
var multiline = require('multiline');

var gitignore = multiline(function(){/*
# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git
node_modules
*/});

var appjs = multiline(function(){/*
var express = require('express');
var bodyParser = require('body-parser');
var mongoose = require('mongoose');

var app = express();

app.use(express.static('public'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

// Configure more middlewares below
// app.use(...)
// Configure more middlewares above

require('./routes')(app);

mongoose.connect(process.env.MONGODB || 'mongodb://localhost:27017/test', function () {
    console.log('[MongoDB] connected to mongodb')
    app.listen(process.env.PORT || '8080', process.env.IP || '127.0.0.1', function () {
        console.log('[Server] listening on port %s', this.address().port);
    });
});
*/});

var controllersjs = multiline(function(){/*
var controllers = require('./controllers');

controllers.forEach(function (controller) {
    exports[controller] = require('./' + controller);
});
*/});

var modelsjs = multiline(function(){/*
var models = require('./models');

models.forEach(function (model) {
    exports[model] = require('./' + model);
});
*/});

var routesjs = multiline(function(){/*
module.exports = function (app) {
    require('./routes').forEach(function (route) {
        require('./' + route)(app);
    });
};
*/});

var indexhtml = multiline(function(){/*
<!DOCTYPE html>
<html>
<head>
    <title>NS Set Up</title>
    <link rel='stylesheet' type='text/css' href='css/main.css'>
</head>
<body>
    <h1>Success</h1>
    <script type='text/javascript' src='js/main.js'></script>
</body>
</html>
*/});

var modeltpljs = multiline(function(){/*
var mongoose = require('mongoose');

var schema = new mongoose.Schema(
    // Put your schema here
);

module.exports = mongoose.model('__name__', schema);
*/});

var routetpljs = multiline(function(){/*
var controllers = require('../controllers');

module.exports = function (app) {

    // Register the routes for your app here
    // e.g.
    // app.get('/login', controllers.User.login);

};
*/});

var controllertpljs = multiline(function(){/*
var models = require('../models');

// Creates your own handler functions below
exports.exampleHandler = function (request, response) {
    
};
*/});

var packagejson = multiline(function(){/*
{
  "name": "",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "node app.js"
  },
  "repository": {
    "type": "git",
    "url": ""
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "bugs": {
    "url": ""
  },
  "homepage": "",
  "dependencies": {
    "body-parser": "^1.13.3",
    "express": "^4.13.3",
    "mongoose": "^4.1.2"
  }
}
*/});


var print_help = function () {
    console.log("Usage: ns <command-name>");
    console.log("");
    console.log("    ns init <app-name>");
    console.log("    ns new model <model-name>");
    console.log("    ns new route <model-name>");
    console.log("    ns help");
    console.log("");
};

var init = function (app_name) {
    var app_dir = root_dir + "/" + app_name;
    fs.mkdirSync(app_dir);
    fs.writeFileSync(app_dir + "/.gitignore", gitignore);
    fs.writeFileSync(app_dir + "/app.js", appjs);

    var pkg = JSON.parse(packagejson); pkg.name = app_name;
    fs.writeFileSync(app_dir + "/package.json", JSON.stringify(pkg));
    fs.writeFileSync(app_dir + "/README.md", app_name);

    fs.mkdirSync(app_dir + "/controllers");
    fs.writeFileSync(app_dir + "/controllers/controllers.json", "[]");
    fs.writeFileSync(app_dir + "/controllers/index.js", controllersjs);
    
    fs.mkdirSync(app_dir + "/models");
    fs.writeFileSync(app_dir + "/models/models.json", "[]");
    fs.writeFileSync(app_dir + "/models/index.js", modelsjs);
    
    fs.mkdirSync(app_dir + "/routes");
    fs.writeFileSync(app_dir + "/routes/routes.json", "[]");
    fs.writeFileSync(app_dir + "/routes/index.js", routesjs);

    fs.mkdirSync(app_dir + "/public");
    fs.writeFileSync(app_dir + "/public/index.html", indexhtml);
    fs.mkdirSync(app_dir + "/public/css");
    fs.writeFileSync(app_dir + "/public/css/main.css", "");
    fs.mkdirSync(app_dir + "/public/js");
    fs.writeFileSync(app_dir + "/public/js/main.js", "");
};

var new_model = function (model_name) {
    var models = require(root_dir + "/models/models");
    if (models.indexOf(model_name) != -1) {
        console.error(model_name + " model already exists!");
    } else {
        models.push(model_name);
        fs.writeFileSync(root_dir + "/models/" + model_name + ".js", modeltpljs.replace(/__name__/g, model_name));
        fs.writeFileSync(root_dir + "/models/models.json", JSON.stringify(models));
    }
};

var new_route = function (route_name) {
    var routes = require(root_dir + "/routes/routes");
    var controllers = require(root_dir + "/controllers/controllers");
    if (routes.indexOf(route_name) != -1) {
        console.error(route_name + " route already exists!");
    } else if (controllers.indexOf(route_name) != -1) {
        console.error(route_name + " controller already exists!");
    } else {
        routes.push(route_name); controllers.push(route_name);
        fs.writeFileSync(root_dir + "/routes/" + route_name + ".js", routetpljs);
        fs.writeFileSync(root_dir + "/routes/routes.json", JSON.stringify(routes));
        fs.writeFileSync(root_dir + "/controllers/" + route_name + ".js", controllertpljs);
        fs.writeFileSync(root_dir + "/controllers/controllers.json", JSON.stringify(controllers));
    }
};

if (process.argv.length < 3) {
    print_help();
} else {
    switch (process.argv[2]) {
        case "init":
            if (process.argv[3]) {
                init(process.argv[3]);
            } else {
                print_help();
            }
            break;
        case "new":
            if (process.argv.length == 5) {
                if (process.argv[3] == "model") {
                    new_model(process.argv[4]);
                } else if (process.argv[3] == "route") {
                    new_route(process.argv[4]);
                } else {
                    print_help();
                }
            } else {
                print_help();
            }
            break;
        default:
            print_help();
            break;
    }
}
