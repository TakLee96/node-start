#!/usr/bin/env node

var root_dir = process.env.PWD;
var fs = require("fs");
var multiline = require('multiline');

var gitignore = multiline(function(){/*
# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git
node_modules
*/});

var appjs = multiline(function(){/*
var express = require('express');
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var session = require('express-session');
var MongoStore = require('connect-mongo')(session);
var logger = require('./utils/logger');
var config = require('./ns-config');

mongoose.connect(config.mongodb, function (err) {
    if (err) {
        console.error('[MongoDB] failed to connect to mongodb');
    } else {
        console.log('[MongoDB] successfully connected to mongodb');
    }

    var app = express();
    app.set('view engine', 'jade');

    app.use(logger());
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(session({
        secret: config.name,
        store: new MongoStore({mongooseConnection: mongoose.connection}),
        ttl: 60 * 60,  // 1 hour (default is 14 days)
        resave: true,
        saveUninitialized: true
    }));
    app.use(function (req, res, next) {
        res.locals.session = req.session;
        next();
    });

    // Configure more middlewares below
    // app.use(...)
    // Configure more middlewares above

    require('./routes')(app);

    app.use(function (req, res, next) {
        res.status(404).end("Resource for " + req.method + " " + req.url + " not found");
    });
    app.use(function (err, req, res, next) {
        console.error(err.stack);
        res.status(500).end("Oops... The programmer screws up something...");
    });

    app.listen(config.port, config.ip, function () {
        console.log('[Server] listening on port %s\n', this.address().port);
    });
});
*/});

var controllersjs = multiline(function(){/*
var controllers = require('./controllers');

controllers.forEach(function (controller) {
    exports[controller] = require('./' + controller);
});
*/});

var modelsjs = multiline(function(){/*
var models = require('./models');

models.forEach(function (model) {
    exports[model] = require('./' + model);
});
*/});

var routesjs = multiline(function(){/*
module.exports = function (app) {
    require('./routes').forEach(function (route) {
        require('./' + route)(app);
    });
};
*/});

var modeltpljs = multiline(function(){/*
var mongoose = require('mongoose');

var schema = new mongoose.Schema(
    // Put your schema here
);

module.exports = mongoose.model('__name__', schema);
*/});

var routetpljs = multiline(function(){/*
var controllers = require('../controllers');

module.exports = function (app) {

    // Register the routes for your app here
    // e.g.
    // app.get('/login', controllers.User.login);

};
*/});

var controllertpljs = multiline(function(){/*
var models = require('../models');

// Creates your own handler functions below
exports.exampleHandler = function (request, response) {
    
};
*/});

var packagejson = multiline(function(){/*
{
  "name": "__name__",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "node app.js",
    "start": "node app.js"
  },
  "repository": {
    "type": "git",
    "url": ""
  },
  "keywords": ["__name__"],
  "author": "",
  "license": "MIT",
  "bugs": {
    "url": ""
  },
  "homepage": "",
  "dependencies": {
    "body-parser": "^1.13.3",
    "express": "^4.13.3",
    "mongoose": "^4.1.2",
    "jade": "^1.11.0",
    "express-session": "^1.11.3",
    "connect-mongo": "^0.8.2",
    "email-validator": "^1.0.1"
  }
}
*/});

var loggerjs = multiline(function(){/*
var logger = function (req, res, next) {
    var start = +new Date();
    var count = ++logger.count;
    console.log("[Server] #%s %s %s", count, req.method, req.url);
    res.on('finish', function () {
        var end = +new Date();
        console.log("         #%s complete in %sms", count, end-start);
    });
    next();
};

logger.count = 0;

module.exports = function () {
    return logger;
};
*/});

var hashjs = multiline(function(){/*
var crypto = require('crypto');

module.exports = function (pass, salt) {
    var hash = crypto.createHash('sha512');
    hash.update(pass);
    hash.update(salt);
    return hash.digest('base64');
}
*/})

var nsconfigjs = multiline(function(){/*
module.exports = {
    name: '__name__',
    port: process.env.PORT || 8080,
    ip: process.env.IP || '127.0.0.1',
    mongodb: 'mongodb://localhost:27017/__name__'
};
*/});

var layoutjade = multiline(function(){/*
doctype html

html
    head
        meta(charset="utf8")
        title= pageTitle
        style
            include stylesheets/main.css
    body
        header
            h1= pageTitle
        section#status
            ul
                if session.isLoggedIn
                    li
                        a(href="/logout") Logout
                else
                    li
                        a(href="/login") Login
                    li
                        a(href="/signup") Signup
        section#content
            block content
        script(src="http://code.jquery.com/jquery-2.1.4.min.js")
        script
            include javascripts/main.js
*/});

var homejade = multiline(function(){/*
extends layout

block content
    if session.isLoggedIn
        p You are logged in! Welcome #{session.user.username}!
    else
        p You are not logged in! Welcome guest!
*/});

var loginjade = multiline(function(){/*
extends layout

block content
    form(method='POST', action='/login')
        if empty
            .error Empty Username/Password!
        if incorrect
            .error Wrong Password!
        if notExists
            .error User does not exists!
        ul
            li
                label(for='username') Username
                input#username(name='username', required=true)
            li
                label(for='password') Password
                input#password(name='password', type='password', required=true)
        input(type='submit', value='Log In')
*/});

var signupjade = multiline(function(){/*
extends layout

block content
    form(method='POST', action='/signup')
        if exists
            .error
                | That user already exists. Are you trying to 
                a(href='/login') log in
                | ?
        if empty
            .error Please complete all the required fields
        if invalid
            .error Invalid email address
        ul
            li
                label(for='username') Username
                input#username(name='username', required=true)
            li
                label(for='email') Email
                input#email(name='email', required=true)
            li
                label(for='password') Password
                input#password(name='password', type='password', required=true)
        input(type='submit', value='Sign Up')
*/});

var maincss = multiline(function(){/*
.error {
    color: red;
}
*/});

var mainjs = multiline(function(){/*
$(document).ready(function () {
    // start your code here
});
*/});

var usercontrollerjs = multiline(function(){/*
var validator = require('email-validator');
var crypto = require('crypto');
var hash = require('../utils/hash');
var User = require('../models').User;

exports.login = function (req, res, next) {
    if (req.body && req.body.username && req.body.password) {
        User.findOne({'_id.username': req.body.username}, function (err, user) {
            if (err) {
                next(err);
            } else if (user) {
                if (user.hash !== hash(req.body.password, user.salt)) {
                    res.render('login', {incorrect: true, pageTitle: 'Log In'});
                } else {
                    req.session.isLoggedIn = true;
                    req.session.user = {
                        username: user._id.username,
                        email: user._id.email
                    };
                    res.redirect('/');
                }
            } else {
                res.render('login', {notExists: true, pageTitle: 'Log In'});
            }
        });
    } else {
        res.render('login', {empty: true, pageTitle: 'Log In'});
    }
};

exports.signup = function (req, res, next) {
    if (req.body && req.body.username && req.body.email && req.body.password) {
        User.findOne({'_id.username': req.body.username}, function (err, user) {
            if (err) {
                next(err)
            } else if (user) {
                res.render('signup', {exists: true, pageTitle: 'Sign Up'});
            } else if (validator.validate(req.body.email)) {
                crypto.randomBytes(16, function (err, bytes) {
                    if (err) {
                        next(err);
                    } else {
                        var config = { '_id': {
                            username: req.body.username,
                            email: req.body.email
                        } };
                        config.salt = bytes.toString('utf8');
                        config.hash = hash(req.body.password, config.salt);
                        config.date = new Date();

                        var user = new User(config);
                        user.save(function (err) {
                            if (err) {
                                next(err);
                            } else {
                                req.session.isLoggedIn = true;
                                req.session.user = {
                                    username: config._id.username,
                                    email: config._id.email
                                };
                                console.log("[MongoDB] new user %s created", user.username);
                                res.redirect('/');
                            }
                        });
                    }
                });
            } else {
                res.render('signup', {invalid: true, pageTitle: 'Sign Up'});
            }
        });
    } else {
        res.render('signup', {empty: true, pageTitle: 'Sign Up'});
    }
};

exports.logout = function (req, res, next) {
    req.session.isLoggedIn = false;
    req.session.user = null;
    res.redirect('/');
};
*/});

var usermodeljs = multiline(function(){/*
var mongoose = require('mongoose');

var schema = new mongoose.Schema({
    _id: {
        username: {type: String, lowercase: true, trim: true, required: true},
        email: {type: String, lowercase: true, trim: true, required: true}
    },
    salt: {type: String, required: true},
    hash: {type: String, required: true},
    date: {type: Date, required: true}
});

module.exports = mongoose.model('User', schema);
*/});

var userroutejs = multiline(function(){/*
var controllers = require('../controllers');

module.exports = function (app) {

    app.get('/', function (req, res, next) {
        res.render('home', {pageTitle: 'Home'});
    });

    app.get('/login', function (req, res, next) {
        res.render('login', {pageTitle: 'Log In'});
    });

    app.post('/login', controllers.User.login);

    app.get('/signup', function (req, res, next) {
        res.render('signup', {pageTitle: 'Sign Up'});
    });

    app.post('/signup', controllers.User.signup);

    app.get('/logout', controllers.User.logout);

};
*/});

var print_help = function () {
    console.log("[ns] Usage: ns <command-name>");
    console.log("");
    console.log("    ns init <app-name>");
    console.log("    ns new model <model-name>");
    console.log("    ns new route <model-name>");
    console.log("    ns help");
    console.log("");
};

var init = function (app_name) {
    var app_dir = root_dir + "/" + app_name;
    fs.mkdirSync(app_dir);
    fs.writeFileSync(app_dir + "/.gitignore", gitignore);
    fs.writeFileSync(app_dir + "/app.js", appjs);
    fs.writeFileSync(app_dir + "/ns-config.js", nsconfigjs.replace(/__name__/g, app_name));

    fs.writeFileSync(app_dir + "/package.json", packagejson.replace(/__name__/g, app_name));
    fs.writeFileSync(app_dir + "/README.md", app_name);

    fs.mkdirSync(app_dir + "/controllers");
    fs.writeFileSync(app_dir + "/controllers/controllers.json", "[\"User\"]");
    fs.writeFileSync(app_dir + "/controllers/index.js", controllersjs);
    fs.writeFileSync(app_dir + "/controllers/User.js", usercontrollerjs);
    
    fs.mkdirSync(app_dir + "/models");
    fs.writeFileSync(app_dir + "/models/models.json", "[\"User\"]");
    fs.writeFileSync(app_dir + "/models/index.js", modelsjs);
    fs.writeFileSync(app_dir + "/models/User.js", usermodeljs);
    
    fs.mkdirSync(app_dir + "/routes");
    fs.writeFileSync(app_dir + "/routes/routes.json", "[\"User\"]");
    fs.writeFileSync(app_dir + "/routes/index.js", routesjs);
    fs.writeFileSync(app_dir + "/routes/User.js", userroutejs);

    fs.mkdirSync(app_dir + "/views");
    fs.mkdirSync(app_dir + "/views/stylesheets");
    fs.mkdirSync(app_dir + "/views/javascripts");
    fs.writeFileSync(app_dir + "/views/stylesheets/main.css", maincss);
    fs.writeFileSync(app_dir + "/views/javascripts/main.js", mainjs);
    fs.writeFileSync(app_dir + "/views/layout.jade", layoutjade);
    fs.writeFileSync(app_dir + "/views/home.jade", homejade);
    fs.writeFileSync(app_dir + "/views/login.jade", loginjade);
    fs.writeFileSync(app_dir + "/views/signup.jade", signupjade);

    fs.mkdirSync(app_dir + "/utils");
    fs.writeFileSync(app_dir + "/utils/logger.js", loggerjs);
    fs.writeFileSync(app_dir + "/utils/hash.js", hashjs);

    console.log("[ns] initialized successfully! please cd into " + app_name + " and do npm install first");
};

var new_model = function (model_name) {
    var models = require(root_dir + "/models/models");
    if (models.indexOf(model_name) != -1) {
        console.error("[ns] " + model_name + " model already exists!");
    } else {
        models.push(model_name);
        fs.writeFileSync(root_dir + "/models/" + model_name + ".js", modeltpljs.replace(/__name__/g, model_name));
        fs.writeFileSync(root_dir + "/models/models.json", JSON.stringify(models));
        console.log("[ns] " + model_name + " model generated successfully!");
    }
};

var new_route = function (route_name) {
    var routes = require(root_dir + "/routes/routes");
    var controllers = require(root_dir + "/controllers/controllers");
    if (routes.indexOf(route_name) != -1) {
        console.error("[ns] " + route_name + " route already exists!");
    } else if (controllers.indexOf(route_name) != -1) {
        console.error("[ns] " + route_name + " controller already exists!");
    } else {
        routes.push(route_name); controllers.push(route_name);
        fs.writeFileSync(root_dir + "/routes/" + route_name + ".js", routetpljs);
        fs.writeFileSync(root_dir + "/routes/routes.json", JSON.stringify(routes));
        fs.writeFileSync(root_dir + "/controllers/" + route_name + ".js", controllertpljs);
        fs.writeFileSync(root_dir + "/controllers/controllers.json", JSON.stringify(controllers));
        console.log("[ns] " + route_name + " route and controller generated successfully!");
    }
};

if (process.argv.length < 3) {
    print_help();
} else {
    switch (process.argv[2]) {
        case "init":
            if (process.argv[3]) {
                init(process.argv[3]);
            } else {
                print_help();
            }
            break;
        case "new":
            if (process.argv.length == 5) {
                if (process.argv[3] == "model") {
                    new_model(process.argv[4]);
                } else if (process.argv[3] == "route") {
                    new_route(process.argv[4]);
                } else {
                    print_help();
                }
            } else {
                print_help();
            }
            break;
        default:
            print_help();
            break;
    }
}
